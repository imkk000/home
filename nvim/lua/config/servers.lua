local lsp = {
  "buf_ls",
  "bashls",
  "jsonls",
  "lua_ls",
  "yamlls",
  "marksman",
  "emmet_ls",
  "html",
  "ts_ls",
  "cssls",
  "dockerls",
  "docker_compose_language_service",
  "gopls",
  "dartls",
  "clangd",
}
local mason_lsp = {
  "buf_ls",
  "bashls",
  "jsonls",
  "lua_ls",
  "yamlls",
  "marksman",
  "emmet_ls",
  "html",
  "ts_ls",
  "cssls",
  "dockerls",
  "docker_compose_language_service",
  "gopls",
  "clangd",
}

_G.servers = {
  lsp = lsp,
  mason_lsp = mason_lsp,
  null_ls = {
    "buf",
    "checkmake",
    "codespell",
    "fish",
    "fish_indent",
    "gofumpt",
    "goimports",
    "golangci_lint",
    "golines",
    "gomodifytags",
    "hadolint",
    "impl",
    "markdownlint",
    "prettier",
    "selene",
    "shfmt",
    "spell",
    "stylua",
    "yamllint",
    "dart_format",
  },
  sources_null_ls = function()
    local builtins = require("null-ls").builtins
    return {
      builtins.formatting.dart_format,
      builtins.code_actions.gomodifytags,
      builtins.code_actions.impl,
      builtins.completion.spell,
      builtins.diagnostics.buf,
      builtins.diagnostics.checkmake,
      builtins.diagnostics.codespell,
      builtins.diagnostics.fish,
      builtins.diagnostics.hadolint,
      builtins.diagnostics.yamllint,
      builtins.diagnostics.selene,
      builtins.formatting.buf,
      builtins.formatting.fish_indent,
      builtins.formatting.gofumpt,
      builtins.formatting.goimports,
      builtins.formatting.markdownlint,
      builtins.formatting.prettier,
      builtins.formatting.shfmt,
      builtins.formatting.stylua,
      builtins.formatting.golines.with({
        extra_args = {
          "--max-len=180",
          "--base-formatter=gofumpt",
        },
      }),
      builtins.diagnostics.golangci_lint.with({
        args = {
          "run",
          "--output.json.path",
          "stdout",
          "--config",
          "~/.config/nvim/linters/golangci.yaml",
        },
      }),
    }
  end,
  dap = { "delve" },
}
